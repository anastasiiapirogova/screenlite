name: Server integration test

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start containers
      run: |
        docker compose up -d --build
        
        # Wait for all services to be healthy
        echo "Waiting for services to be ready..."
        
        # Wait for database
        echo "Waiting for PostgreSQL..."
        timeout 120 bash -c 'until docker compose exec -T postgres pg_isready -U postgres -d screenlite; do sleep 2; done'
        
        # Wait for Redis
        echo "Waiting for Redis..."
        timeout 60 bash -c 'until docker compose exec -T redis redis-cli ping; do sleep 2; done'
        
        # Wait for MinIO
        echo "Waiting for MinIO..."
        timeout 60 bash -c 'until curl -f http://localhost:9001/minio/health/live; do sleep 2; done'
        
        # Wait for FFmpeg service
        echo "Waiting for FFmpeg service..."
        timeout 60 bash -c 'until docker compose exec -T ffmpeg-service curl -f http://localhost:3002/health; do sleep 2; done'
        
        # Wait for server to be healthy
        echo "Waiting for server..."
        timeout 120 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
        
        echo "All services are ready!"

    - name: Run database migrations
      run: |
        docker compose exec -T server npm run db:deploy

    - name: Run tests
      run: |
        docker compose exec -T server npm test

    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Server logs ==="
        docker compose logs server
        echo "=== Database logs ==="
        docker compose logs postgres
        echo "=== Redis logs ==="
        docker compose logs redis
        echo "=== MinIO logs ==="
        docker compose logs minio
        echo "=== FFmpeg service logs ==="
        docker compose logs ffmpeg-service

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f 